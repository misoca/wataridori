#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'wataridori'
require 'dotenv/load'
require 'yaml'

def usage
  warn <<~USAGE
    Usage: bin/wataridori [mode]
      bulk_copy "path/to/category" [path/to/copy_result.yml]
      replace_links path/to/copy_result.yml [..path/to/copy_result2.yml]
      copy_and_replace "path/to/category" [path/to/copy_result.yml]
  USAGE
  exit false
end

usage unless ARGV.first

%w[ESA_TOKEN ESA_FROM_TEAM ESA_TO_TEAM].each do |key|
  unless ENV[key]
    warn "Error: #{key} is empty. Please set the value to .env file."
    exit false
  end
end

client = Wataridori::Client.from_teamname(
  token: ENV['ESA_TOKEN'],
  from: ENV['ESA_FROM_TEAM'],
  to: ENV['ESA_TO_TEAM']
)

case ARGV[0]
when 'bulk_copy'
  category = ARGV[1]
  path = ARGV[2]
  usage if category.nil?

  copy_results = client.bulk_copy(category)
  YAML.dump(copy_results.map(&:to_h), File.open(path, 'w')) if path
when 'replace_links'
  copy_results = ARGV.slice(1..-1).inject([]) do |results, filepath|
    results + YAML.load_file(filepath).map { |h| Wataridori::CopyResult.create_by_hash(from: h[:from], to: h[:to])  }
  end
  usage if copy_results.length.zero?

  client.replace_links(copy_results)
when 'copy_and_replace'
  category = ARGV[1]
  path = ARGV[2]
  usage if category.nil?

  copy_results = client.bulk_copy(category)
  YAML.dump(copy_results.map(&:to_h), File.open(path, 'w')) if path
  client.replace_links(copy_results)
end
